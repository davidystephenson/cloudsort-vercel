// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Archive {
  event   Event     @relation(fields: [eventId], references: [id])
  eventId Int       @unique
  id      Int       @id @default(autoincrement())
  item    EventItem @relation(fields: [itemId], references: [id])
  itemId  Int
}

model Choice {
  aBetter       Boolean
  aId           Int
  aIndex        Int
  aItem         EventItem @relation("aItems", fields: [aId], references: [id])
  bId           Int
  bIndex        Int
  bItem         EventItem @relation("bItems", fields: [bId], references: [id])
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int       @unique
  id            Int       @id @default(autoincrement())
  mergeChoiceId Int
  random        Boolean
  seeded        Boolean
}

model Event {
  archive   Archive?
  choice    Choice?
  createdAt DateTime   @default(now())
  id        Int        @id @default(autoincrement())
  import    Import?
  list      List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    Int
  random    Random?
  remove    Remove?
  reset     Reset?
  unarchive Unarchive?
}

model EventItem {
  id            Int         @id @default(autoincrement())
  item          Item        @relation(fields: [itemId], references: [id])
  itemId        Int
  seed          Int?
  aChoiceEvents Choice[]    @relation("aItems")
  bChoiceEvents Choice[]    @relation("bItems")
  importItem    ImportItem?
  firstRandom   Random?     @relation("firstRandom")
  secondRandom  Random?     @relation("secondRandom")
  removals      Remove[]
  resets        Reset[]
  archives      Archive[]
  Unarchive     Unarchive[]
}

model Import {
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     Int          @unique
  id          Int          @id @default(autoincrement())
  importItems ImportItem[]
}

model ImportItem {
  id       Int
  item     EventItem @relation(fields: [itemId], references: [id])
  itemId   Int       @unique
  import   Import    @relation(fields: [importId], references: [id])
  importId Int
}

model Item {
  id         Int         @id @default(autoincrement())
  name       String
  movie      Movie?
  eventItems EventItem[]
}

model List {
  id             Int     @id @default(autoincrement())
  choiceCount    Int     @default(0)
  events         Event[]
  name           String
  operationCount Int     @default(0)
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  seed           String
}

model Movie {
  id     Int     @id @default(autoincrement())
  imdbId String
  item   Item    @relation(fields: [itemId], references: [id])
  itemId Int     @unique
  url    String?
  year   Int
}

model Random {
  id         Int       @id @default(autoincrement())
  event      Event     @relation(fields: [eventId], references: [id])
  eventId    Int       @unique
  firstItem  EventItem @relation("firstRandom", fields: [firstId], references: [id])
  firstId    Int       @unique
  secondItem EventItem @relation("secondRandom", fields: [secondId], references: [id])
  secondId   Int       @unique
}

model Remove {
  event   Event     @relation(fields: [eventId], references: [id])
  eventId Int       @unique
  id      Int       @id @default(autoincrement())
  item    EventItem @relation(fields: [itemId], references: [id])
  itemId  Int
}

model Reset {
  event   Event     @relation(fields: [eventId], references: [id])
  eventId Int       @unique
  id      Int       @id @default(autoincrement())
  item    EventItem @relation(fields: [itemId], references: [id])
  itemId  Int
}

model Unarchive {
  event   Event     @relation(fields: [eventId], references: [id])
  eventId Int       @unique
  id      Int       @id @default(autoincrement())
  item    EventItem @relation(fields: [itemId], references: [id])
  itemId  Int
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  shade    String?
  lists    List[]
}
