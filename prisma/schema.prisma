// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Archive {
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     Int       @unique
  eventItem   EventItem @relation(fields: [eventItemId], references: [id])
  eventItemId Int       @unique
  id          Int       @id @default(autoincrement())
}

model Choice {
  aBetter       Boolean
  aId           Int       @unique
  aEventItem    EventItem @relation("aItem", fields: [aId], references: [id])
  betterIndex   Int
  bId           Int       @unique
  bEventItem    EventItem @relation("bItem", fields: [bId], references: [id])
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int       @unique
  id            Int       @id @default(autoincrement())
  random        Boolean
  seeded        Boolean
}

model Event {
  archive       Archive?
  choice        Choice?
  createdAt     DateTime   @default(now())
  id            Int        @id @default(autoincrement())
  import        Import?
  list          List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId        Int
  mergeChoiceId Int
  random        Random?
  remove        Remove?
  reset         Reset?
  unarchive     Unarchive?
}

model EventItem {
  aChoiceEvent Choice?     @relation("aItem")
  archive      Archive?
  bChoiceEvent Choice?     @relation("bItem")
  firstRandom  Random?     @relation("firstRandom")
  id           Int         @id @default(autoincrement())
  item         Item        @relation(fields: [itemId], references: [id])
  itemId       Int
  import       Import?     @relation(fields: [importId], references: [id])
  importId     Int?
  points       Int
  removal      Remove?
  reset        Reset?
  secondRandom Random?     @relation("secondRandom")
  seed         Int?
  seeding      Boolean
  unarchive    Unarchive[]
}

model Import {
  event      Event       @relation(fields: [eventId], references: [id])
  eventId    Int         @unique
  eventItems EventItem[]
  id         Int         @id @default(autoincrement())
}

model Item {
  eventItems EventItem[]
  id         Int         @id @default(autoincrement())
  name       String
  movie      Movie?
}

model List {
  events         Event[]
  id             Int     @id @default(autoincrement())
  name           String
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  seed           String
}

model Movie {
  id     Int     @id @default(autoincrement())
  imdbId String
  item   Item    @relation(fields: [itemId], references: [id])
  itemId Int     @unique
  url    String?
  year   Int
}

model Random {
  event           Event     @relation(fields: [eventId], references: [id])
  eventId         Int       @unique
  firstEventItem  EventItem @relation("firstRandom", fields: [firstId], references: [id])
  firstId         Int       @unique
  id              Int       @id @default(autoincrement())
  secondEventItem EventItem @relation("secondRandom", fields: [secondId], references: [id])
  secondId        Int       @unique
}

model Remove {
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     Int       @unique
  id          Int       @id @default(autoincrement())
  eventItemId Int       @unique
  eventItem   EventItem @relation(fields: [eventItemId], references: [id])
}

model Reset {
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     Int       @unique
  id          Int       @id @default(autoincrement())
  eventItem   EventItem @relation(fields: [eventItemId], references: [id])
  eventItemId Int       @unique
}

model Unarchive {
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int       @unique
  id        Int       @id @default(autoincrement())
  eventItem EventItem @relation(fields: [itemId], references: [id])
  itemId    Int
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  shade    String?
  lists    List[]
}
