// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Archive {
  episode       Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId     Int         @unique
  episodeItem   EpisodeItem @relation(fields: [episodeItemId], references: [id], onDelete: Cascade)
  episodeItemId Int         @unique
  id            Int         @id @default(autoincrement())
}

model Choice {
  aBetter        Boolean
  aEpisodeItem   EpisodeItem @relation("aItem", fields: [aEpisodeItemId], references: [id], onDelete: Cascade)
  aEpisodeItemId Int         @unique
  betterIndex    Int
  bEpisodeItem   EpisodeItem @relation("bItem", fields: [bEpisodeItemId], references: [id], onDelete: Cascade)
  bEpisodeItemId Int         @unique
  episode        Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId      Int         @unique
  id             Int         @id @default(autoincrement())
  random         Boolean
  seeded         Boolean
}

model Episode {
  archive       Archive?
  choice        Choice?
  createdAt     DateTime   @default(now())
  id            Int        @id @default(autoincrement())
  import        Import?
  list          List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId        Int
  mergeChoiceId Int
  random        Random?
  remove        Remove?
  reset         Reset?
  unarchive     Unarchive?
}

model EpisodeItem {
  aChoiceEpisode Choice?     @relation("aItem")
  archive        Archive?
  bChoiceEpisode Choice?     @relation("bItem")
  firstRandom    Random?     @relation("firstRandom")
  id             Int         @id @default(autoincrement())
  item           Item        @relation(fields: [itemId], references: [id])
  itemId         Int
  import         Import?     @relation(fields: [importId], references: [id], onDelete: Cascade)
  importId       Int?
  points         Int
  removal        Remove?
  reset          Reset?
  secondRandom   Random?     @relation("secondRandom")
  seed           Int?
  seeding        Boolean
  unarchive      Unarchive[]
}

model Import {
  episode      Episode       @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId    Int           @unique
  episodeItems EpisodeItem[]
  id           Int           @id @default(autoincrement())
}

model Item {
  episodeItems EpisodeItem[]
  id           Int           @id @default(autoincrement())
  name         String
  movie        Movie?
}

model List {
  episodes Episode[]
  id       Int       @id @default(autoincrement())
  name     String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  seed     String
}

model Movie {
  id     Int     @id @default(autoincrement())
  imdbId String
  item   Item    @relation(fields: [itemId], references: [id])
  itemId Int     @unique
  url    String?
  year   Int
}

model Random {
  episode             Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId           Int         @unique
  firstEpisodeItem    EpisodeItem @relation("firstRandom", fields: [firstEpisodeItemId], references: [id], onDelete: Cascade)
  firstEpisodeItemId  Int         @unique
  id                  Int         @id @default(autoincrement())
  secondEpisodeItem   EpisodeItem @relation("secondRandom", fields: [secondEpisodeItemId], references: [id], onDelete: Cascade)
  secondEpisodeItemId Int         @unique
}

model Remove {
  episode       Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId     Int         @unique
  id            Int         @id @default(autoincrement())
  episodeItem   EpisodeItem @relation(fields: [episodeItemId], references: [id], onDelete: Cascade)
  episodeItemId Int         @unique
}

model Reset {
  episode       Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId     Int         @unique
  id            Int         @id @default(autoincrement())
  episodeItem   EpisodeItem @relation(fields: [episodeItemId], references: [id], onDelete: Cascade)
  episodeItemId Int         @unique
}

model Unarchive {
  episode       Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId     Int         @unique
  id            Int         @id @default(autoincrement())
  episodeItem   EpisodeItem @relation(fields: [episodeItemId], references: [id], onDelete: Cascade)
  episodeItemId Int
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  shade    String?
  lists    List[]
}
